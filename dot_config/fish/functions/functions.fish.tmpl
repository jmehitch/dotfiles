# allows CTRL + Backspace/DEL to delete words in terminals
function fish_user_key_bindings
  # ctrl + backspace to delete previous word
  bind \cW backward-kill-word
end

# tailscale alias
function ts
    if command -v tailscale >/dev/null
        tailscale $argv
    else if command -v /Applications/Tailscale.app/Contents/MacOS/Tailscale >/dev/null
        /Applications/Tailscale.app/Contents/MacOS/Tailscale $argv
    else
        "tailscale not installed"
    end
end

# tailscale switch
function tss
    if test -n "$argv"
        ts switch $argv
    else
        ts switch $(ts switch --list | grep -v ID | grep -v '*' | awk '{ print $3 }')
    end
end

# tailscale up
function tsup
    if test -n "$argv"
        if test $argv[1] = "exit"
            set EXIT_NODE_FLAG --exit-node=$(ts exit-node list --filter=uk | grep mnc | tail -n 1 | awk '{ print $ 2 }') --exit-node-allow-lan-access=true
        else if test $argv[1] = "lon"
            set EXIT_NODE_FLAG --exit-node=$(ts exit-node list --filter=uk | grep lon | tail -n 1 | awk '{ print $ 2 }') --exit-node-allow-lan-access=true
        else if test $argv[1] = "man"
            set EXIT_NODE_FLAG --exit-node=$(ts exit-node list --filter=uk | grep mnc | tail -n 1 | awk '{ print $ 2 }') --exit-node-allow-lan-access=true
        else
            set EXIT_NODE_FLAG "--reset"
        end
    else
        set EXIT_NODE_FLAG "--reset"
    end

    ts up $EXIT_NODE_FLAG
end

# commit and push
function cap
    set -l message "$argv"

    if test -z "$argv"
        echo "no commit message given"
        return 1
    end

    if string match -q "*oneid*" (pwd)
        if test (git branch --show-current) = "main" || test (git branch --show-current) = "master"
            echo "you're on main, you pleb."
            return 1
        end
    end

    git add . && git commit -m "$message" && git push -u origin (git rev-parse --abbrev-ref HEAD)
end

# kubecolor
function kubectl --wraps kubectl
  command kubecolor $argv
end

# amend previous git commit with current changes, preserving the message
function gitamend
    # ensure we are inside a git repository
    if not git rev-parse --git-dir >/dev/null 2>/dev/null
        echo "error: not in a git repository"
        return 1
    end

    # if there are no staged changes, exit early
    if git diff --cached --quiet
        echo "error: no staged changes to commit"
        return 0
    end

    # capture the previous commit message as a single string (preserve newlines)
    set -l COMMIT_MSG (git log -1 --pretty=format:%B | string collect)

    echo "amending previous commit..."
    printf "%s" "$COMMIT_MSG" | git commit --amend -F -; or return $status

    printf "added changes to previous commit: `%s`\n" "$COMMIT_MSG"
end

{{ if eq .chezmoi.os "darwin" -}}
# create jira ticket
function jira_create
    jira issue create -t"Dev Task" --custom team={{ (bitwardenFields "item" "atlassian-creds").infra_team_id.value }} -s""$argv"" --web
end

# list my jira tickets
function jira_list
    jira issue list --assignee $(jira me) -s~Done -s~Closed -t~Epic
end
{{ end -}}
